// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub struct OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2> {
    empty_operation: Op0,
    get_pokemon_species: Op1,
    get_server_statistics: Op2,
    _phantom: std::marker::PhantomData<(B, In0, In1, In2)>,
}
pub struct OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2> {
    empty_operation: Option<Op0>,
    get_pokemon_species: Option<Op1>,
    get_server_statistics: Option<Op2>,
    _phantom: std::marker::PhantomData<(B, In0, In1, In2)>,
}
#[derive(std::fmt::Debug)]
pub enum OperationRegistryBuilderError {
    UninitializedField(&'static str),
}
impl std::fmt::Display for OperationRegistryBuilderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::UninitializedField(v) => write!(f, "{}", v),
        }
    }
}
impl std::error::Error for OperationRegistryBuilderError {}
impl<B, Op0, In0, Op1, In1, Op2, In2> std::default::Default
    for OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2>
{
    fn default() -> Self {
        Self {
            empty_operation: Default::default(),
            get_pokemon_species: Default::default(),
            get_server_statistics: Default::default(),
            _phantom: std::marker::PhantomData,
        }
    }
}
impl<B, Op0, In0, Op1, In1, Op2, In2> OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2> {
    pub fn empty_operation(self, value: Op0) -> Self {
        let mut new = self;
        new.empty_operation = Some(value);
        new
    }
    pub fn get_pokemon_species(self, value: Op1) -> Self {
        let mut new = self;
        new.get_pokemon_species = Some(value);
        new
    }
    pub fn get_server_statistics(self, value: Op2) -> Self {
        let mut new = self;
        new.get_server_statistics = Some(value);
        new
    }
    pub fn build(
        self,
    ) -> Result<OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2>, OperationRegistryBuilderError>
    {
        Ok(OperationRegistry {
            empty_operation: match self.empty_operation {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "empty_operation",
                    ))
                }
            },
            get_pokemon_species: match self.get_pokemon_species {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_pokemon_species",
                    ))
                }
            },
            get_server_statistics: match self.get_server_statistics {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_server_statistics",
                    ))
                }
            },
            _phantom: std::marker::PhantomData,
        })
    }
}
impl<B, Op0, In0, Op1, In1, Op2, In2>
    std::convert::From<OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2>>
    for aws_smithy_http_server::routing::Router<B>
where
    B: Send + 'static,
    Op0: crate::server_operation_handler_trait::Handler<B, In0, crate::input::EmptyOperationInput>,
    In0: 'static + Send,
    Op1: crate::server_operation_handler_trait::Handler<
        B,
        In1,
        crate::input::GetPokemonSpeciesInput,
    >,
    In1: 'static + Send,
    Op2: crate::server_operation_handler_trait::Handler<
        B,
        In2,
        crate::input::GetServerStatisticsInput,
    >,
    In2: 'static + Send,
{
    fn from(registry: OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2>) -> Self {
        let empty_operation_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("empty-operation")),
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        let get_pokemon_species_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("pokemon-species")),
            aws_smithy_http_server::routing::request_spec::PathSegment::Label,
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        let get_server_statistics_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("stats")),
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        aws_smithy_http_server::routing::Router::new_rest_json_router(vec![
            (
                tower::util::BoxCloneService::new(
                    crate::server_operation_handler_trait::operation(registry.empty_operation),
                ),
                empty_operation_request_spec,
            ),
            (
                tower::util::BoxCloneService::new(
                    crate::server_operation_handler_trait::operation(registry.get_pokemon_species),
                ),
                get_pokemon_species_request_spec,
            ),
            (
                tower::util::BoxCloneService::new(
                    crate::server_operation_handler_trait::operation(
                        registry.get_server_statistics,
                    ),
                ),
                get_server_statistics_request_spec,
            ),
        ])
    }
}
