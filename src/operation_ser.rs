// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn serialize_empty_operation_response(
    #[allow(unused_variables)] output: crate::output::EmptyOperationOutput,
) -> std::result::Result<
    aws_smithy_http_server::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = http::Response::builder();
        builder = aws_smithy_http::header::set_response_header_if_absent(
            builder,
            http::header::CONTENT_TYPE,
            "application/json",
        );
        let status = 200;
        let http_status: u16 = status.try_into().map_err(|_| {
            aws_smithy_http_server::rejection::ResponseRejection::InvalidHttpStatusCode
        })?;
        builder = builder.status(http_status);
        let body = aws_smithy_http_server::body::to_boxed(
            crate::operation_ser::serialize_structure_crate_output_empty_operation_output(&output)?,
        );
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_pokemon_species_response(
    #[allow(unused_variables)] output: crate::output::GetPokemonSpeciesOutput,
) -> std::result::Result<
    aws_smithy_http_server::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = http::Response::builder();
        builder = aws_smithy_http::header::set_response_header_if_absent(
            builder,
            http::header::CONTENT_TYPE,
            "application/json",
        );
        let status = 200;
        let http_status: u16 = status.try_into().map_err(|_| {
            aws_smithy_http_server::rejection::ResponseRejection::InvalidHttpStatusCode
        })?;
        builder = builder.status(http_status);
        let body = aws_smithy_http_server::body::to_boxed(
            crate::operation_ser::serialize_structure_crate_output_get_pokemon_species_output(
                &output,
            )?,
        );
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_pokemon_species_error(
    error: &crate::error::GetPokemonSpeciesError,
) -> std::result::Result<
    aws_smithy_http_server::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        match error {
            crate::error::GetPokemonSpeciesError::ResourceNotFoundException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_resource_not_found_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ResourceNotFoundException",
                );
                builder
                    .status(404)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
        }
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_server_statistics_response(
    #[allow(unused_variables)] output: crate::output::GetServerStatisticsOutput,
) -> std::result::Result<
    aws_smithy_http_server::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = http::Response::builder();
        builder = aws_smithy_http::header::set_response_header_if_absent(
            builder,
            http::header::CONTENT_TYPE,
            "application/json",
        );
        let status = 200;
        let http_status: u16 = status.try_into().map_err(|_| {
            aws_smithy_http_server::rejection::ResponseRejection::InvalidHttpStatusCode
        })?;
        builder = builder.status(http_status);
        let body = aws_smithy_http_server::body::to_boxed(
            crate::operation_ser::serialize_structure_crate_output_get_server_statistics_output(
                &output,
            )?,
        );
        builder.body(body)?
    })
}

pub fn serialize_structure_crate_output_empty_operation_output(
    value: &crate::output::EmptyOperationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_output_empty_operation_output(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_output_get_pokemon_species_output(
    value: &crate::output::GetPokemonSpeciesOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_output_get_pokemon_species_output(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_resource_not_found_exception(
    value: &crate::error::ResourceNotFoundException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_resource_not_found_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_output_get_server_statistics_output(
    value: &crate::output::GetServerStatisticsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_output_get_server_statistics_output(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}
