// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn parse_empty_operation_request<B>(
    #[allow(unused_variables)] request: &mut aws_smithy_http_server::request::RequestParts<B>,
) -> std::result::Result<
    crate::input::EmptyOperationInput,
    aws_smithy_http_server::rejection::RequestRejection,
>
where
    B: aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::empty_operation_input::Builder::default();
        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub async fn parse_get_pokemon_species_request<B>(
    #[allow(unused_variables)] request: &mut aws_smithy_http_server::request::RequestParts<B>,
) -> std::result::Result<
    crate::input::GetPokemonSpeciesInput,
    aws_smithy_http_server::rejection::RequestRejection,
>
where
    B: aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::get_pokemon_species_input::Builder::default();
        let input_string = request.uri().path();
        let (input_string, (_, m1)) = nom::sequence::tuple::<_, _, nom::error::Error<&str>, _>((
            nom::sequence::preceded(
                nom::bytes::complete::tag("/"),
                nom::bytes::complete::tag::<_, _, nom::error::Error<&str>>("pokemon-species"),
            ),
            nom::sequence::preceded(
                nom::bytes::complete::tag("/"),
                nom::branch::alt::<_, _, nom::error::Error<&str>, _>((
                    nom::bytes::complete::take_until("/"),
                    nom::combinator::rest,
                )),
            ),
        ))(input_string)?;
        debug_assert_eq!("", input_string);
        input = input.set_name(Some(
            crate::operation_deser::parse_str_get_pokemon_species_input_name(m1)?,
        ));
        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub async fn parse_get_server_statistics_request<B>(
    #[allow(unused_variables)] request: &mut aws_smithy_http_server::request::RequestParts<B>,
) -> std::result::Result<
    crate::input::GetServerStatisticsInput,
    aws_smithy_http_server::rejection::RequestRejection,
>
where
    B: aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::get_server_statistics_input::Builder::default();
        input.build()?
    })
}

pub fn parse_str_get_pokemon_species_input_name(
    value: &str,
) -> std::result::Result<std::string::String, aws_smithy_http_server::rejection::RequestRejection> {
    let value = percent_encoding::percent_decode_str(value).decode_utf8()?;
    let value = std::string::String::try_from(value.as_ref())?;

    Ok(value)
}
