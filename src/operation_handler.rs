// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::EmptyOperationInput> for Fun
where
    Fun: FnOnce(crate::input::EmptyOperationInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<Output = crate::output::EmptyOperationOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        use aws_smithy_http_server::request::FromRequest;
        use aws_smithy_http_server::response::IntoResponse;
        let input_wrapper =
            match crate::operation::EmptyOperationOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    return runtime_error
                        .into_response()
                        .map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::EmptyOperationOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        response.extensions_mut().insert(
            aws_smithy_http_server::extension::OperationExtension::new(
                "com.aws.example",
                "EmptyOperation",
            ),
        );
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::GetPokemonSpeciesInput>
    for Fun
where
    Fun: FnOnce(crate::input::GetPokemonSpeciesInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<
            Output = Result<
                crate::output::GetPokemonSpeciesOutput,
                crate::error::GetPokemonSpeciesError,
            >,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        use aws_smithy_http_server::request::FromRequest;
        use aws_smithy_http_server::response::IntoResponse;
        let input_wrapper =
            match crate::operation::GetPokemonSpeciesOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    return runtime_error
                        .into_response()
                        .map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::GetPokemonSpeciesOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        response.extensions_mut().insert(
            aws_smithy_http_server::extension::OperationExtension::new(
                "com.aws.example",
                "GetPokemonSpecies",
            ),
        );
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::GetServerStatisticsInput>
    for Fun
where
    Fun: FnOnce(crate::input::GetServerStatisticsInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<Output = crate::output::GetServerStatisticsOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        use aws_smithy_http_server::request::FromRequest;
        use aws_smithy_http_server::response::IntoResponse;
        let input_wrapper =
            match crate::operation::GetServerStatisticsOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    return runtime_error
                        .into_response()
                        .map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::GetServerStatisticsOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        response.extensions_mut().insert(
            aws_smithy_http_server::extension::OperationExtension::new(
                "com.aws.example",
                "GetServerStatistics",
            ),
        );
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::EmptyOperationInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::EmptyOperationInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<Output = crate::output::EmptyOperationOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        use aws_smithy_http_server::request::FromRequest;
        use aws_smithy_http_server::response::IntoResponse;
        let input_wrapper =
            match crate::operation::EmptyOperationOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    return runtime_error
                        .into_response()
                        .map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError {
                    protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                    kind: extension_not_found_rejection.into(),
                };
                let mut response = runtime_error.into_response();
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::EmptyOperationOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        response.extensions_mut().insert(
            aws_smithy_http_server::extension::OperationExtension::new(
                "com.aws.example",
                "EmptyOperation",
            ),
        );
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::GetPokemonSpeciesInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::GetPokemonSpeciesInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<
            Output = Result<
                crate::output::GetPokemonSpeciesOutput,
                crate::error::GetPokemonSpeciesError,
            >,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        use aws_smithy_http_server::request::FromRequest;
        use aws_smithy_http_server::response::IntoResponse;
        let input_wrapper =
            match crate::operation::GetPokemonSpeciesOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    return runtime_error
                        .into_response()
                        .map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError {
                    protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                    kind: extension_not_found_rejection.into(),
                };
                let mut response = runtime_error.into_response();
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::GetPokemonSpeciesOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        response.extensions_mut().insert(
            aws_smithy_http_server::extension::OperationExtension::new(
                "com.aws.example",
                "GetPokemonSpecies",
            ),
        );
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::GetServerStatisticsInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::GetServerStatisticsInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<Output = crate::output::GetServerStatisticsOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        use aws_smithy_http_server::request::FromRequest;
        use aws_smithy_http_server::response::IntoResponse;
        let input_wrapper =
            match crate::operation::GetServerStatisticsOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    return runtime_error
                        .into_response()
                        .map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError {
                    protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                    kind: extension_not_found_rejection.into(),
                };
                let mut response = runtime_error.into_response();
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::GetServerStatisticsOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        response.extensions_mut().insert(
            aws_smithy_http_server::extension::OperationExtension::new(
                "com.aws.example",
                "GetServerStatistics",
            ),
        );
        response.map(aws_smithy_http_server::body::boxed)
    }
}
